name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    name: Build and Deploy Frontend to Server
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.js 설정
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 환경 변수 설정 및 `.env` 파일 생성
      - name: Create .env file
        run: |
          cat <<EOF > .env
          VITE_BASE_REQUEST_URL=${{ secrets.VITE_BASE_REQUEST_URL }}
          VITE_IMAGE_REQUEST_URL=${{ secrets.VITE_IMAGE_REQUEST_URL }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_REDIRECT_URI=${{ secrets.VITE_GOOGLE_REDIRECT_URI }}
          VITE_GOOGLE_SCOPE=${{ secrets.VITE_GOOGLE_SCOPE }}
          VITE_KAKAO_CLIENT_ID=${{ secrets.VITE_KAKAO_CLIENT_ID }}
          VITE_KAKAO_REDIRECT_URI=${{ secrets.VITE_KAKAO_REDIRECT_URI }}
          VITE_NAVER_CLIENT_ID=${{ secrets.VITE_NAVER_CLIENT_ID }}
          VITE_NAVER_REDIRECT_URI=${{ secrets.VITE_NAVER_REDIRECT_URI }}
          EOF

      # 종속성 설치
      - name: Install dependencies
        run: npm ci

      # 프로젝트 빌드
      - name: Build project
        run: npm run build

      # 빌드 결과물 저장 (롤백용)
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 5

      # 서버에 배포 (SSH 접속)
      - name: Deploy to server
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # 오류 발생 시 스크립트 중단

            # 배포 전 백업 생성
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/home/joo/backups/${TIMESTAMP}"
            mkdir -p $BACKUP_DIR

            cd /home/joo/Front-end-coffee

            # 기존 배포 백업
            if [ -d "dist" ]; then
              cp -r dist $BACKUP_DIR/
              cp docker-compose.yml $BACKUP_DIR/
              cp .env $BACKUP_DIR/
              echo "Backup created at $BACKUP_DIR"
            fi

            # 코드 업데이트
            git fetch origin
            git reset --hard origin/main

            # 기존 컨테이너 제거 후 재시작 (frontend-nginx 제거됨)
            echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker-compose down -v
            echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker-compose up -d --build

            # public 디렉터리 관리 (frontend 컨테이너에서 실행)
            echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker exec frontend-container /bin/sh -c "
              mkdir -p /usr/share/nginx/html/public && 
              cp /usr/share/nginx/html/*.svg /usr/share/nginx/html/public/ 2>/dev/null || true
            "

      # Nginx 서비스 재시작 (frontend 컨테이너에서 실행)
      - name: Restart Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # 오류 발생 시 스크립트 중단
            cd /home/joo/Front-end-coffee
            echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker-compose restart frontend

        # 배포 실패 시 롤백
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # 오류 발생 시 스크립트 중단
            cd /home/joo/Front-end-coffee

            # 최신 백업 찾기
            LATEST_BACKUP=$(find /home/joo/backups -type d -name "20*" | sort -r | head -n 1)

            if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP/dist" ]; then
              echo "Rolling back to backup at $LATEST_BACKUP"
              cp -r $LATEST_BACKUP/dist/* ./dist/
              cp $LATEST_BACKUP/docker-compose.yml ./
              cp $LATEST_BACKUP/.env ./
              
              # 컨테이너 중지
              echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker-compose down
              
              # 컨테이너 재시작
              echo ${{ secrets.SUDO_PASSWORD }} | sudo -S docker-compose up -d
              echo "Rollback completed"
            else
              echo "No valid backup found for rollback"
              exit 1
            fi

      # 배포 결과 알림
      - name: Send deployment status to Discord
        uses: nebularg/actions-discord-webhook@v1
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
        if: always()
